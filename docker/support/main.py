import logging
import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
import asyncio
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7262869145:AAH6sKvsW76To6hJ8N0XXTifeFJ5LnfIsGQ"
DATA_FILE = "support_bot_data.json"
TIMEOUT_MINUTES = 0.2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return {
                    "support_ids": set(map(int, data.get("support_ids", [2113625271, 6358923796]))),
                    "active_dialogs": {int(k): {
                        'support_id': v['support_id'],
                        'last_activity': datetime.fromisoformat(v['last_activity']) if isinstance(v['last_activity'], str) else v['last_activity'],
                        'sleep_after': v.get('sleep_after', False)
                    } for k, v in data.get("active_dialogs", {}).items()},
                    "user_to_support": {int(k): v for k, v in data.get("user_to_support", {}).items()},
                    "support_to_user": {int(k): v for k, v in data.get("support_to_user", {}).items()},
                    "request_queue": data.get("request_queue", []),
                    "active_supports": set(map(int, data.get("active_supports", [2113625271, 6358923796]))),
                    "busy_supports": set(map(int, data.get("busy_supports", []))),
                    "sleeping_supports": set(map(int, data.get("sleeping_supports", []))),
                    "processed_users": set(map(int, data.get("processed_users", [])))
                }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            os.remove(DATA_FILE)
    
    return {
        "support_ids": {2113625271, 6358923796},
        "active_dialogs": {},
        "user_to_support": {},
        "support_to_user": {},
        "request_queue": [],
        "active_supports": {2113625271, 6358923796},
        "busy_supports": set(),
        "sleeping_supports": set(),
        "processed_users": set()
    }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data():
    data = {
        "support_ids": list(support_ids),
        "active_dialogs": {str(k): {
            'support_id': v['support_id'],
            'last_activity': v['last_activity'].isoformat(),
            'sleep_after': v.get('sleep_after', False)
        } for k, v in active_dialogs.items()},
        "user_to_support": {str(k): v for k, v in user_to_support.items()},
        "support_to_user": {str(k): v for k, v in support_to_user.items()},
        "request_queue": request_queue,
        "active_supports": list(active_supports),
        "busy_supports": list(busy_supports),
        "sleeping_supports": list(sleeping_supports),
        "processed_users": list(processed_users)
    }
    
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
data = load_data()
support_ids = data["support_ids"]
active_dialogs = data["active_dialogs"]
user_to_support = data["user_to_support"]
support_to_user = data["support_to_user"]
request_queue = data["request_queue"]
active_supports = data["active_supports"]
busy_supports = data["busy_supports"]
sleeping_supports = data["sleeping_supports"]
processed_users = data["processed_users"]

# –¢–∞–π–º–µ—Ä—ã –¥–ª—è —Ç–∞–π–º–∞—É—Ç–∞
timeout_tasks = {}

async def start_timeout(user_id):
    if user_id in timeout_tasks:
        timeout_tasks[user_id].cancel()
    
    async def timeout_task():
        try:
            await asyncio.sleep(TIMEOUT_MINUTES * 60)
            if user_id in active_dialogs:
                last_activity = active_dialogs[user_id]['last_activity']
                if (datetime.now() - last_activity) >= timedelta(minutes=TIMEOUT_MINUTES):
                    support_id = active_dialogs[user_id]['support_id']
                    await close_dialog(user_id, support_id, timeout=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    timeout_tasks[user_id] = asyncio.create_task(timeout_task())

def cancel_timeout(user_id):
    if user_id in timeout_tasks:
        timeout_tasks[user_id].cancel()
        del timeout_tasks[user_id]

async def reset_timeout(user_id):
    if user_id in active_dialogs:
        active_dialogs[user_id]['last_activity'] = datetime.now()
        await start_timeout(user_id)

async def restore_timeouts():
    for user_id in list(active_dialogs.keys()):
        await start_timeout(user_id)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_user_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/help")]],
        resize_keyboard=True
    )

def get_dialog_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/thank")]],
        resize_keyboard=True
    )

def get_support_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/active"), KeyboardButton(text="/sleep")],
            [KeyboardButton(text="/add_support")]
        ],
        resize_keyboard=True
    )

def get_support_dialog_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/break")],
            [KeyboardButton(text="/sleep")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def start(message: Message):
    user_id = message.from_user.id
    
    if user_id in support_ids:
        if user_id in support_to_user:
            await message.answer(
                "üë®‚Äçüíª –í—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
                reply_markup=get_support_dialog_keyboard()
            )
        else:
            await message.answer(
                "üë®‚Äçüíª –í—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
                reply_markup=get_support_keyboard()
            )
    else:
        if user_id in active_dialogs:
            await message.answer(
                "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
                reply_markup=get_dialog_keyboard()
            )
        else:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                reply_markup=get_user_keyboard()
            )

@dp.message(Command("help"))
async def help_command(message: Message):
    user_id = message.from_user.id
    
    if user_id in support_ids:
        if user_id in support_to_user:
            await message.answer(
                "‚ÑπÔ∏è –í—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=get_support_dialog_keyboard()
            )
        else:
            await message.answer(
                "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=get_support_keyboard()
            )
        return
    
    if user_id in active_dialogs:
        await message.answer(
            "‚ÑπÔ∏è –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
            reply_markup=get_dialog_keyboard()
        )
        return
    
    if user_id in processed_users:
        await message.answer(
            "üîÑ –í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    request_queue.append({
        'user_id': user_id,
        'username': message.from_user.username or "–ë–µ–∑ username",
        'time': datetime.now().isoformat()
    })
    processed_users.add(user_id)
    save_data()
    
    await message.answer(
        "üîÑ –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...",
        reply_markup=ReplyKeyboardRemove()
    )
    await assign_support()

@dp.message(Command("thank"))
async def thank_command(message: Message):
    user_id = message.from_user.id
    
    if user_id in active_dialogs:
        support_id = active_dialogs[user_id]['support_id']
        await close_dialog(user_id, support_id, closed_by_user=True)
        await message.answer(
            "‚úÖ –î–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            reply_markup=get_user_keyboard()
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
            reply_markup=get_user_keyboard()
        )

@dp.message(Command("add_support"))
async def add_support(message: Message):
    if message.from_user.id not in support_ids:
        return
    
    if not message.reply_to_message or not message.reply_to_message.forward_from:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ (reply) –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        return
    
    new_support_id = message.reply_to_message.forward_from.id
    if new_support_id in support_ids:
        await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    support_ids.add(new_support_id)
    active_supports.add(new_support_id)
    save_data()
    
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_support_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä")
    await bot.send_message(
        chat_id=new_support_id,
        text="üéâ –í–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!",
        reply_markup=get_support_keyboard()
    )

@dp.message(Command("break"))
async def break_command(message: Message):
    if message.from_user.id not in support_ids:
        return
    
    support_id = message.from_user.id
    
    if support_id in support_to_user:
        user_id = support_to_user[support_id]
        await close_dialog(user_id, support_id, closed_by_support=True)
        await message.answer(
            "‚è∏ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥",
            reply_markup=get_support_keyboard()
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤",
            reply_markup=get_support_keyboard()
        )

@dp.message(Command("sleep"))
async def sleep_mode(message: Message):
    if message.from_user.id not in support_ids:
        return
    
    support_id = message.from_user.id
    
    if support_id in sleeping_supports:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞")
        return
    
    if support_id in support_to_user:
        user_id = support_to_user[support_id]
        active_dialogs[user_id]['sleep_after'] = True
        save_data()
        await message.answer("‚è≥ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π–¥—ë—Ç–µ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞.")
    else:
        sleeping_supports.add(support_id)
        active_supports.discard(support_id)
        save_data()
        await message.answer(
            "üí§ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –∏ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            reply_markup=get_support_keyboard()
        )

@dp.message(Command("active"))
async def active_mode(message: Message):
    if message.from_user.id not in support_ids:
        return
    
    support_id = message.from_user.id
    
    if support_id not in sleeping_supports:
        await message.answer("‚ÑπÔ∏è –í—ã —É–∂–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        return
    
    sleeping_supports.remove(support_id)
    active_supports.add(support_id)
    save_data()
    
    await message.answer(
        "‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –∏ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
        reply_markup=get_support_keyboard() if support_id not in support_to_user else get_support_dialog_keyboard()
    )
    
    if support_id not in support_to_user and request_queue:
        await assign_support()

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    if user_id in active_dialogs:
        await process_user_message(message)
    elif user_id in support_ids and user_id in support_to_user:
        await process_support_message(message)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        if user_id in support_ids:
            await message.answer(
                "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
                reply_markup=get_support_keyboard()
            )
        else:
            await message.answer(
                "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è —Å–≤—è–∑–∏",
                reply_markup=get_user_keyboard()
            )

async def process_user_message(message: Message):
    user_id = message.from_user.id
    dialog = active_dialogs[user_id]
    support_id = dialog['support_id']
    
    dialog['last_activity'] = datetime.now()
    await reset_timeout(user_id)
    save_data()
    
    await bot.send_message(
        chat_id=support_id,
        text=f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{message.text}"
    )

async def process_support_message(message: Message):
    support_id = message.from_user.id
    user_id = support_to_user[support_id]
    
    active_dialogs[user_id]['last_activity'] = datetime.now()
    await reset_timeout(user_id)
    save_data()
    
    await bot.send_message(
        chat_id=user_id,
        text=f"üë®‚Äçüíª –û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}"
    )

async def assign_support():
    try:
        queue_copy = request_queue.copy()
        
        for request in queue_copy:
            available_supports = active_supports - busy_supports - sleeping_supports
            if not available_supports:
                break
            
            user_id = request['user_id']
            
            if user_id in active_dialogs:
                if request in request_queue:
                    request_queue.remove(request)
                if user_id in processed_users:
                    processed_users.discard(user_id)
                continue
                
            support_id = min(available_supports)
            
            active_dialogs[user_id] = {
                'support_id': support_id,
                'last_activity': datetime.now(),
                'sleep_after': False
            }
            user_to_support[user_id] = support_id
            support_to_user[support_id] = user_id
            busy_supports.add(support_id)
            
            if request in request_queue:
                request_queue.remove(request)
            if user_id in processed_users:
                processed_users.discard(user_id)
            save_data()
            
            await bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n\n"
                     f"üîπ –ï—Å–ª–∏ –≤—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç–µ –±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç, –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç",
                reply_markup=get_dialog_keyboard()
            )
            
            await bot.send_message(
                chat_id=support_id,
                text=f"üì© –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å @{request['username']}\n\n"
                     f"üîπ –û—Ç–≤–µ—á–∞–π—Ç–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n"
                     f"üîπ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ {TIMEOUT_MINUTES} –º–∏–Ω –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                reply_markup=get_support_dialog_keyboard()
            )
            
            await start_timeout(user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ assign_support: {e}")

# async def close_dialog(user_id, support_id, closed_by_user=False, closed_by_support=False, timeout=False):
#     sleep_after = active_dialogs.get(user_id, {}).get('sleep_after', False)
    
#     if user_id in active_dialogs:
#         del active_dialogs[user_id]
#     if user_id in user_to_support:
#         del user_to_support[user_id]
#     if support_id in support_to_user:
#         del support_to_user[support_id]
    
#     if user_id in processed_users:
#         processed_users.discard(user_id)
    
#     busy_supports.discard(support_id)
#     cancel_timeout(user_id)
    
#     if timeout:
#         await bot.send_message(
#             chat_id=user_id,
#             text=f"‚è≥ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç)",
#             reply_markup=get_user_keyboard()
#         )
        
#         # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞
#         if support_id not in sleeping_supports:
#             await bot.send_message(
#                 chat_id=support_id,
#                 text=f"‚è≥ –î–∏–∞–ª–æ–≥ –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
#                 reply_markup=get_support_keyboard()
#             )
#     elif closed_by_user:
#         await bot.send_message(
#             chat_id=support_id,
#             text="‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
#             reply_markup=get_support_keyboard()
#         )
#     elif closed_by_support:
#         await bot.send_message(
#             chat_id=user_id,
#             text="‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
#             reply_markup=get_user_keyboard()
#         )
    
#     if sleep_after:
#         sleeping_supports.add(support_id)
#         active_supports.discard(support_id)
#         await bot.send_message(
#             chat_id=support_id,
#             text="üí§ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞",
#             reply_markup=get_support_keyboard()
#         )
    
#     save_data()
#     await assign_support()

# async def close_dialog(user_id, support_id, closed_by_user=False, closed_by_support=False, timeout=False):
#     sleep_after = active_dialogs.get(user_id, {}).get('sleep_after', False)
    
#     if user_id in active_dialogs:
#         del active_dialogs[user_id]
#     if user_id in user_to_support:
#         del user_to_support[user_id]
#     if support_id in support_to_user:
#         del support_to_user[support_id]
    
#     if user_id in processed_users:
#         processed_users.discard(user_id)
    
#     busy_supports.discard(support_id)
#     cancel_timeout(user_id)
    
#     if timeout:
#         # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         await bot.send_message(
#             chat_id=user_id,
#             text=f"‚è≥ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç)",
#             reply_markup=get_user_keyboard()
#         )
        
#         # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –≤ —Ä–µ–∂–∏–º–µ —Å–Ω–∞)
#         try:
#             await bot.send_message(
#                 chat_id=support_id,
#                 text=f"‚è≥ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
#                 reply_markup=get_support_keyboard()
#             )
#         except Exception as e:
#             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {support_id}: {e}")
        
#     elif closed_by_user:
#         await bot.send_message(
#             chat_id=support_id,
#             text="‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
#             reply_markup=get_support_keyboard()
#         )
#     elif closed_by_support:
#         await bot.send_message(
#             chat_id=user_id,
#             text="‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
#             reply_markup=get_user_keyboard()
#         )
    
#     if sleep_after:
#         sleeping_supports.add(support_id)
#         active_supports.discard(support_id)
#         await bot.send_message(
#             chat_id=support_id,
#             text="üí§ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞",
#             reply_markup=get_support_keyboard()
#         )
    
#     save_data()
#     await assign_support()

# async def close_dialog(user_id, support_id, closed_by_user=False, closed_by_support=False, timeout=False):
#     sleep_after = active_dialogs.get(user_id, {}).get('sleep_after', False)
    
#     if user_id in active_dialogs:
#         del active_dialogs[user_id]
#     if user_id in user_to_support:
#         del user_to_support[user_id]
#     if support_id in support_to_user:
#         del support_to_user[support_id]
    
#     if user_id in processed_users:
#         processed_users.discard(user_id)
    
#     busy_supports.discard(support_id)
#     cancel_timeout(user_id)
    
#     if timeout:
#         # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
#         username = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
#         for request in request_queue:
#             if request['user_id'] == user_id:
#                 username = f"@{request['username']}" if request['username'] else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
#                 break
        
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
#         timeout_message = f"‚è≥ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç)"
#         print('pidor')
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#         await bot.send_message(
#             chat_id=user_id,
#             text=timeout_message,
#             reply_markup=get_user_keyboard()
#         )
#         print('pidor')
        
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É (—Ç–æ—á–Ω–æ —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
#         await bot.send_message(
#             chat_id=support_id,
#             text=f"‚è≥ –î–∏–∞–ª–æ–≥ —Å {username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç)",
#             reply_markup=get_support_keyboard()
#         )
#         print('pidor')
        
#     elif closed_by_user:
#         await bot.send_message(
#             chat_id=support_id,
#             text="‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
#             reply_markup=get_support_keyboard()
#         )
#     elif closed_by_support:
#         await bot.send_message(
#             chat_id=user_id,
#             text="‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
#             reply_markup=get_user_keyboard()
#         )
    
#     if sleep_after:
#         sleeping_supports.add(support_id)
#         active_supports.discard(support_id)
#         await bot.send_message(
#             chat_id=support_id,
#             text="üí§ –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞",
#             reply_markup=get_support_keyboard()
#         )
    
#     save_data()
#     await assign_support()

async def close_dialog(user_id, support_id, closed_by_user=False, closed_by_support=False, timeout=False):
    sleep_after = active_dialogs.get(user_id, {}).get('sleep_after', False)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    username = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    for request in request_queue:
        if request['user_id'] == user_id:
            username = f"@{request['username']}" if request['username'] else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            break

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–∞–ª–æ–≥–µ
    if user_id in active_dialogs:
        del active_dialogs[user_id]
    if user_id in user_to_support:
        del user_to_support[user_id]
    if support_id in support_to_user:
        del support_to_user[support_id]
    
    processed_users.discard(user_id)
    busy_supports.discard(support_id)
    cancel_timeout(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
    if timeout:
        timeout_message = f"‚è≥ –î–∏–∞–ª–æ–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ–ª–µ–µ {TIMEOUT_MINUTES} –º–∏–Ω—É—Ç)"
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            await bot.send_message(
                chat_id=user_id,
                text=timeout_message,
                reply_markup=get_user_keyboard()
            )
            
            # 2. –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(
                chat_id=support_id,
                text=f"‚è≥ –î–∏–∞–ª–æ–≥ —Å {username}:\n{timeout_message}",
                reply_markup=get_support_keyboard()
            )
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
            try:
                await bot.send_message(
                    chat_id=support_id,
                    text=f"‚è≥ –î–∏–∞–ª–æ–≥ —Å {username} –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    reply_markup=get_support_keyboard()
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    elif closed_by_user:
        await bot.send_message(
            chat_id=support_id,
            text=f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
            reply_markup=get_support_keyboard()
        )
    elif closed_by_support:
        await bot.send_message(
            chat_id=user_id,
            text="‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥",
            reply_markup=get_user_keyboard()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
    if sleep_after:
        sleeping_supports.add(support_id)
        active_supports.discard(support_id)
        try:
            await bot.send_message(
                chat_id=support_id,
                text="üí§ –í—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –ø–æ—Å–ª–µ –¥–∏–∞–ª–æ–≥–∞",
                reply_markup=get_support_keyboard()
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–µ: {e}")

    save_data()
    await assign_support()
    
async def main():
    await restore_timeouts()
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())