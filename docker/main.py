import asyncio
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from text_bot import *
from db import create_pool, get_user_by_phone, create_user, get_available_events, create_appointment, get_event_by_id, get_user_appointments,get_user_by_tg_id

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
ADMIN_IDS = {2113625271, 6358923796}  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
agreement_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_agreement")],
    [types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_agreement")]
])

reply_group_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text='üéì –°—Ç—É–¥–µ–Ω—Ç (0)')],
        [types.KeyboardButton(text='üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫ (1)')],
        [types.KeyboardButton(text='üåç –í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä (2)')]
    ],
    resize_keyboard=True
)

reply_age_kb = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text='–î–∞'), types.KeyboardButton(text='–ù–µ—Ç')]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

external_donor_kb = types.InlineKeyboardMarkup(inline_keyboard=[
    [types.InlineKeyboardButton(text="–Ø –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", callback_data="external_reg_complete")]
])

def get_main_menu_kb(is_admin=False):
    buttons = [
        [types.InlineKeyboardButton(text='–ü–æ–º–æ—â—å', callback_data='menu_help')],
        [types.InlineKeyboardButton(text='–°–≤—è–∑—å —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏', url='https://www.gosuslugi.ru/help/faq/donor/14122022')],
        [types.InlineKeyboardButton(text='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º', callback_data='sign_up')],
        [types.InlineKeyboardButton(text='–ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data='my_signs')],
        [types.InlineKeyboardButton(text='–ó–∞—á–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –¥–æ–Ω–æ—Ä–æ–º', callback_data='why_donor')]
    ]
    if is_admin:
        buttons.append([types.InlineKeyboardButton(text='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin_panel')])
    return types.InlineKeyboardMarkup(inline_keyboard=buttons)

def get_admin_kb():
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin')],
        [types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='remove_admin')],
        [types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='create_event')],
        [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_to_menu')]
    ])

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Reg(StatesGroup):
    agreement = State()
    telephone_number = State()
    name_surname = State()
    age = State()
    user_type = State()
    external_reg = State()

class Appointment(StatesGroup):
    choose_doctor = State()
    choose_date = State()
    confirmation = State()

class AdminStates(StatesGroup):
    add_admin = State()
    remove_admin = State()
    create_event = State()
    event_date = State()
    event_organizer = State()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
router = Router()
pool = None

def normalize_phone(phone: str) -> str:
    phone = phone.strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone.startswith("8"): return "+7" + phone[1:]
    elif phone.startswith("7"): return "+" + phone
    return phone

def is_valid_phone(phone: str) -> bool:
    phone = normalize_phone(phone)
    return phone.startswith("+7") and len(phone) == 12 and phone[1:].isdigit()

def Name_Surname(name_surname: str) -> bool:
    parts = name_surname.split()
    return len(parts) == 3 and all(part[0].isupper() for part in parts)

async def save_user(data: dict, user_type: int, msg: types.Message, state: FSMContext):
    user_data = {
        "fio": data['name_surname'],
        "number_phone": data['telephone_number'],
        "user_type": user_type,
        "tg_id": msg.from_user.id
    }
    
    try:
        await create_user(pool, user_data)
        is_admin = msg.from_user.id in ADMIN_IDS
        await msg.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        await msg.answer(registration_complete, reply_markup=get_main_menu_kb(is_admin))
    except Exception as e:
        print(f"DB error: {e}")
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=types.ReplyKeyboardRemove())
    finally:
        await state.clear()

@router.message(Command("menu"))
async def menu_command(msg: Message, state: FSMContext):
    await state.clear()
    is_admin = msg.from_user.id in ADMIN_IDS
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu_kb(is_admin))

@router.message(CommandStart())
async def Start(msg: Message, state: FSMContext):
    await msg.delete()
    await state.set_state(Reg.agreement)
    await msg.answer(user_agreement, reply_markup=agreement_kb)

@router.callback_query(Reg.agreement, F.data == "accept_agreement")
async def accept_agreement(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(agreement_accepted)
    await state.set_state(Reg.telephone_number)
    await callback.message.answer(start)

@router.message(Reg.telephone_number)
async def telephone_number_h(msg: Message, state: FSMContext):
    phone = normalize_phone(msg.text)
    if not is_valid_phone(phone):
        return await msg.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞')
    
    await msg.answer('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞...')
    try:
        if await get_user_by_phone(pool, phone):
            is_admin = msg.from_user.id in ADMIN_IDS
            await msg.answer(a1, reply_markup=get_main_menu_kb(is_admin))
            await state.clear()
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ tg_id
            await state.update_data(telephone_number=phone, tg_id=msg.from_user.id)
            await state.set_state(Reg.name_surname)
            await msg.answer(a2)
    except Exception as e:
        print(f"DB error: {e}")
        await msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞')

@router.message(Reg.name_surname)
async def user_name_surname(msg: Message, state: FSMContext):
    if not Name_Surname(msg.text):
        return await msg.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á)')
    
    await state.update_data(name_surname=msg.text)
    await state.set_state(Reg.age)
    await msg.answer(a3, reply_markup=reply_age_kb)

@router.message(Reg.age)
async def user_age(msg: Message, state: FSMContext):
    if msg.text.lower() not in ('–¥–∞', '–Ω–µ—Ç'):
        return await msg.answer('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"')
    
    if msg.text.lower() == '–Ω–µ—Ç':
        await msg.answer("‚ùå –í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 18+")
        await state.clear()
        return
    
    await msg.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(Reg.user_type)
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_group_kb)

@router.message(Reg.user_type)
async def user_type_handler(msg: Message, state: FSMContext):
    type_mapping = {
        'üéì –°—Ç—É–¥–µ–Ω—Ç (0)': 0,
        'üíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫ (1)': 1,
        'üåç –í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä (2)': 2
    }
    
    if msg.text not in type_mapping:
        return await msg.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞")
    
    user_type = type_mapping[msg.text]
    data = await state.get_data()
    
    if user_type == 2:  # –í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä
        await state.update_data(user_type=user_type)
        await state.set_state(Reg.external_reg)
        return await msg.answer(
            external_donor_message.format(link=external_donor_link),
            reply_markup=external_donor_kb
        )
    
    await save_user(data, user_type, msg, state)

@router.callback_query(Reg.external_reg, F.data == "external_reg_complete")
async def external_complete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await save_user(data, 2, callback.message, state)
    is_admin = callback.from_user.id in ADMIN_IDS
    await callback.message.edit_text(external_registration_complete, reply_markup=get_main_menu_kb(is_admin))

# --- –ú–µ–Ω—é ---
@router.callback_query(F.data == 'menu_help')
async def menu_help(callback: CallbackQuery):
    is_admin = callback.from_user.id in ADMIN_IDS
    await callback.message.edit_text(help, reply_markup=get_main_menu_kb(is_admin))

@router.callback_query(F.data == 'sign_up')
async def sign_up(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ (–ì–∞–≤—Ä–∏–ª–æ–≤–∞ –∏ –§–ú–ë–ê)
        organizers = [
            {"id": 0, "name": "–ì–∞–≤—Ä–∏–ª–æ–≤–∞"},
            {"id": 1, "name": "–§–ú–ë–ê"}
        ]
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=org["name"], callback_data=f"org_{org['id']}")] 
            for org in organizers
        ])
        
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", reply_markup=kb)
        await state.set_state(Appointment.choose_doctor)
    except Exception as e:
        print(f"Error in sign_up: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(Appointment.choose_doctor, F.data.startswith("org_"))
async def choose_doctor(callback: CallbackQuery, state: FSMContext):
    try:
        organizer_id = int(callback.data.split("_")[1])
        await state.update_data(organizer_id=organizer_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ –ë–î
        events = await get_available_events(pool, organizer_id)
        
        if not events:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏")
            await state.clear()
            return
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text=f"{event['date'].strftime('%d.%m.%Y')} ({'–ì–∞–≤—Ä–∏–ª–æ–≤–∞' if event['organizer'] == 0 else '–§–ú–ë–ê'})", 
                callback_data=f"event_{event['id']}"
            )] 
            for event in events
        ])
        
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:", reply_markup=kb)
        await state.set_state(Appointment.choose_date)
    except Exception as e:
        print(f"Error in choose_doctor: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(Appointment.choose_date, F.data.startswith("event_"))
async def choose_date(callback: CallbackQuery, state: FSMContext):
    try:
        event_id = int(callback.data.split("_")[1])
        await state.update_data(event_id=event_id)
        
        data = await state.get_data()
        organizer_id = data['organizer_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
        event = await get_event_by_id(pool, event_id)
        
        if not event:
            await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ")
            await state.clear()
            return
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_appointment")],
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_appointment")]
        ])
        
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {'–ì–∞–≤—Ä–∏–ª–æ–≤–∞' if organizer_id == 0 else '–§–ú–ë–ê'}\n"
            f"–î–∞—Ç–∞: {event['date'].strftime('%d.%m.%Y')}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:",
            reply_markup=kb
        )
        await state.set_state(Appointment.confirmation)
    except Exception as e:
        print(f"Error in choose_date: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@router.callback_query(Appointment.confirmation, F.data == "confirm_appointment")
async def confirm_appointment(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª–∏–±–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ª–∏–±–æ –ø–æ tg_id
        user = None
        if 'telephone_number' in data:
            user = await get_user_by_phone(pool, data['telephone_number'])
        elif 'tg_id' in data:
            user = await get_user_by_tg_id(pool, data['tg_id'])
        
        if not user:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        appointment_data = {
            "user_id": user['id'],
            "event_id": data['event_id']
        }
        
        await create_appointment(pool, appointment_data)
        
        event = await get_event_by_id(pool, data['event_id'])
        
        await callback.message.edit_text(
            "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ {'–ì–∞–≤—Ä–∏–ª–æ–≤–æ–π' if data['organizer_id'] == 0 else '–§–ú–ë–ê'}\n"
            f"–î–∞—Ç–∞: {event['date'].strftime('%d.%m.%Y')}\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –¥–æ–Ω–æ—Ä–æ–º!",
            reply_markup=get_main_menu_kb(callback.from_user.id in ADMIN_IDS)
        )
        await state.clear()
    except Exception as e:
        print(f"Error in confirm_appointment: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏")
        
@router.callback_query(Appointment.confirmation, F.data == "cancel_appointment")
async def cancel_appointment(callback: CallbackQuery, state: FSMContext):
    is_admin = callback.from_user.id in ADMIN_IDS
    await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_main_menu_kb(is_admin))
    await state.clear()

@router.callback_query(F.data == 'my_signs')
async def my_signs(callback: CallbackQuery):
    try:
        user = await get_user_by_phone(pool, callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        appointments = await get_user_appointments(pool, user['id'])
        
        if not appointments:
            await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            return
        
        response = "üìÖ –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
        for app in appointments:
            event = await get_event_by_id(pool, app['event_id'])
            status = {
                0: "‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ",
                1: "‚ùå –ù–µ –ø—Ä–∏—à–µ–ª",
                2: "‚ö†Ô∏è –ù–µ –ø—Ä–æ—à–µ–ª –º–µ–¥–æ—Å–º–æ—Ç—Ä",
                3: "üéâ –£—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª –∫—Ä–æ–≤—å"
            }.get(app['status'], "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")
            
            response += (
                f"üìå –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {'–ì–∞–≤—Ä–∏–ª–æ–≤–∞' if event['organizer'] == 0 else '–§–ú–ë–ê'}\n"
                f"üìÖ –î–∞—Ç–∞: {event['date'].strftime('%d.%m.%Y')}\n"
                f"üîπ –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        
        is_admin = callback.from_user.id in ADMIN_IDS
        await callback.message.answer(response, reply_markup=get_main_menu_kb(is_admin))
    except Exception as e:
        print(f"Error in my_signs: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π")

@router.callback_query(F.data == 'why_donor')
async def why_donor(callback: CallbackQuery):
    is_admin = callback.from_user.id in ADMIN_IDS
    await callback.message.answer(
        "–°—Ç–∞—Ç—å –¥–æ–Ω–æ—Ä–æ–º - —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å–∞—Ç—å –∂–∏–∑–Ω–∏!\n\n"
        "–ö–∞–∂–¥–∞—è –¥–æ–Ω–∞—Ü–∏—è –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å–ø–∞—Å—Ç–∏ –¥–æ 3 –∂–∏–∑–Ω–µ–π!",
        reply_markup=get_main_menu_kb(is_admin)
    )

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
@router.callback_query(F.data == 'admin_panel')
async def admin_panel(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await callback.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_kb()
    )

@router.callback_query(F.data == 'add_admin')
async def add_admin(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await state.set_state(AdminStates.add_admin)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_action")]
        ])
    )

@router.message(AdminStates.add_admin)
async def process_add_admin(msg: Message, state: FSMContext):
    try:
        new_admin_id = int(msg.text)
        ADMIN_IDS.add(new_admin_id)
        await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        await state.clear()
        await msg.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_kb())
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.callback_query(F.data == 'remove_admin')
async def remove_admin(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if len(ADMIN_IDS) <= 1:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await state.set_state(AdminStates.remove_admin)
    admins_list = "\n".join(f"üîπ {admin_id}" for admin_id in ADMIN_IDS)
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n{admins_list}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_action")]
        ])
    )

@router.message(AdminStates.remove_admin)
async def process_remove_admin(msg: Message, state: FSMContext):
    try:
        admin_id = int(msg.text)
        if admin_id not in ADMIN_IDS:
            await msg.answer("‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            return
        
        if len(ADMIN_IDS) <= 1:
            await msg.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        ADMIN_IDS.remove(admin_id)
        await msg.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        await state.clear()
        await msg.answer("üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=get_admin_kb())
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

@router.callback_query(F.data == 'create_event')
async def create_event(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    await state.set_state(AdminStates.event_date)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_admin_action")]
        ])
    )

@router.message(AdminStates.event_date)
async def process_event_date(msg: Message, state: FSMContext):
    try:
        day, month, year = map(int, msg.text.split('.'))
        if not (1 <= day <= 31 and 1 <= month <= 12 and year >= 2023):
            raise ValueError
        
        await state.update_data(event_date=msg.text)
        await state.set_state(AdminStates.event_organizer)
        
        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ì–∞–≤—Ä–∏–ª–æ–≤–∞", callback_data="org_0")],
            [types.InlineKeyboardButton(text="–§–ú–ë–ê", callback_data="org_1")]
        ])
        
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", reply_markup=kb)
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

@router.callback_query(AdminStates.event_organizer, F.data.startswith("org_"))
async def process_event_organizer(callback: CallbackQuery, state: FSMContext):
    try:
        organizer = int(callback.data.split("_")[1])
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –ë–î
        event_data = {
            "date": data['event_date'],
            "organizer": organizer
        }
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –ë–î
        # await create_event_in_db(pool, event_data)
        
        await callback.message.edit_text(
            f"‚úÖ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ {data['event_date']} —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º "
            f"{'–ì–∞–≤—Ä–∏–ª–æ–≤–∞' if organizer == 0 else '–§–ú–ë–ê'} —Å–æ–∑–¥–∞–Ω–æ!",
            reply_markup=get_admin_kb()
        )
        await state.clear()
    except Exception as e:
        print(f"Error in process_event_organizer: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è")

@router.callback_query(F.data == 'cancel_admin_action')
async def cancel_admin_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_kb()
    )

@router.callback_query(F.data == 'back_to_menu')
async def back_to_menu(callback: CallbackQuery):
    is_admin = callback.from_user.id in ADMIN_IDS
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_kb(is_admin)
    )

async def main():
    global pool
    pool = await create_pool()
    bot = Bot(token='6505951608:AAEj4TFQAIHFjjNEgnOFTS54wlAr8SonlDw')
    dp = Dispatcher()
    dp.include_router(router)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        types.BotCommand(command="menu", description="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ])
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())